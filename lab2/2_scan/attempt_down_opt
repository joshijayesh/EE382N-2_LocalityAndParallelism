
__global__ void
exclusive_scan_downsweep_opt(int* device_in, int N, int length, int* device_result, int multiplier) {
    // warp level optimization, reduce memory pressure
    // multiplier defines what level of log rolling we're at...
    uint32_t index = (2 * multiplier) * (blockIdx.x * blockDim.x + threadIdx.x);

    // max_level to go to from N down to max_level... needs this gross stuff cuz multiplier level itself should not
    // be executed by the higher levels, as it will be covered by the lower levels
    uint32_t max_level = multiplier > 1 ? (multiplier * 2) : 1;

    // assuming blockId * blockDim are > 32
    uint32_t k = 0;
    uint32_t lane = threadIdx.x & 0x1f;
    uint32_t curr_storage = 0xffffffff;
    uint32_t next_storage = 0xffffffff;
    uint32_t participation = 0xffffffff;

    for(int i = N; i >= max_level; i /= 2) {  // This is dumb! how else can we calculate this?
        k += 1;
    }
    k -= 1;


    if(index < length) {
        for(int twod = N; twod >= max_level; twod /= 2) {  // Note N is already / 2
            // Note max depth for each execution is log_2 threads_per_block
            int twod1 = twod * 2;

            if(k < MAX_WARP_LEVEL) {
                if(lane % (2 << k) == 0)  // Need to check if we need to bring in
                    if(curr_storage == 0xffffffff)
                        curr_storage = device_result[index + twod1 - 1];
                    // printf("k = %d Lane %d Curr Storage %x\n", k, lane, curr_storage);


                for(; ; k -= 1) {
                    // curr_storage + 1... if curr_storage is not initialized, then curr_storage => 0xffffffff
                    // 0xffffffff + 1 => 0
                    participation = __ballot_sync(0xffffffff, ((lane & ((1 << k) - 1)) == 0));
                    if(lane % (1 << k) == 0) {  // involved parties
                        next_storage = __shfl_up_sync(participation, curr_storage, 1 << k);
                        // Those that received new info, needs to read out the device data
                        // Those that transmit, don't need to read anything
                        if(lane % (2 << k) != 0) {
                            curr_storage = next_storage + (device_result[index - 1]);
                        }
                    }
                    // printf("K %d Lane %d Curr Storage %x Participation %x\n", k, lane, curr_storage, participation);

                    if(k == 0) break;  // Ugh this again?
                    twod1 = twod;
                    twod >>= 1;
                    if(twod < max_level) break;
                }
                device_result[index + twod1 - 1] = curr_storage + device_result[index + twod - 1];
                device_result[index + twod - 1] = curr_storage;
            } else{
                if((index % twod1) == 0) {  // Only the leader of each group execute
                    if(curr_storage == 0xffffffff)
                        curr_storage = device_result[index + twod1 - 1];

                    device_result[index + twod1 - 1] = curr_storage + device_result[index + twod - 1];
                    // device_result[index + twod - 1] = curr_storage;  // -- no need to write this
                }

                k -= 1;
            }

            __syncthreads();  // sync across blocks
        }
    }
}
